
module mod_mp_nsw6
use mod_precision
use mod_debug
implicit none
private
public :: mp_nsw6_init
public :: mp_nsw6
private :: Bergeron_param
real(RP), private, parameter :: dens00 = 1.28_RP   
real(RP), private            :: N0r    = 8.E+6_RP  
real(RP), private            :: N0s    = 3.E+6_RP  
real(RP), private            :: N0g    = 4.E+6_RP  
real(RP), private            :: rho_s  = 100.0_RP  
real(RP), private            :: rho_g  = 400.0_RP  
real(RP), private            :: C_d    =   0.6_RP  
real(RP), private            :: Cr     = 130.0_RP
real(RP), private            :: Cs     =  4.84_RP
real(RP), private            :: Ar, As, Ag
real(RP), private            :: Br, Bs, Bg
real(RP), private            :: Cg
real(RP), private            :: Dr, Ds, Dg
real(RP), private            :: GAM, GAM_2, GAM_3
real(RP), private            :: GAM_1br, GAM_2br, GAM_3br
real(RP), private            :: GAM_3dr
real(RP), private            :: GAM_6dr
real(RP), private            :: GAM_1brdr
real(RP), private            :: GAM_5dr_h
real(RP), private            :: GAM_1bs, GAM_2bs, GAM_3bs
real(RP), private            :: GAM_3ds
real(RP), private            :: GAM_1bsds
real(RP), private            :: GAM_5ds_h
real(RP), private            :: GAM_1bg, GAM_3dg
real(RP), private            :: GAM_1bgdg
real(RP), private            :: GAM_5dg_h
real(RP), private            :: sw_kk2000  = 0.0_RP      
real(RP), private            :: sw_roh2014 = 0.0_RP      
real(RP), private            :: ln10                 
real(RP), public             :: coef_a(10) = (/ 5.065339_RP, -0.062659_RP, -3.032362_RP, 0.029469_RP, -0.000285_RP, 0.31255_RP,   0.000204_RP,  0.003199_RP, 0.0_RP,      -0.015952_RP  /)
real(RP), public             :: coef_b(10) = (/ 0.476221_RP, -0.015896_RP,  0.165977_RP, 0.007468_RP, -0.000141_RP, 0.060366_RP,  0.000079_RP,  0.000594_RP, 0.0_RP,      -0.003577_RP  /)
real(RP), public             :: a1_tab(32) = (/ 0.0001E-7_RP, 0.7939E-7_RP, 0.7841E-6_RP, 0.3369E-5_RP, 0.4336E-5_RP, 0.5285E-5_RP, 0.3728E-5_RP, 0.1852E-5_RP, 0.2991E-6_RP, 0.4248E-6_RP, 0.7434E-6_RP, 0.1812E-5_RP, 0.4394E-5_RP, 0.9145E-5_RP, 0.1725E-4_RP, 0.3348E-4_RP, 0.1725E-4_RP, 0.9175E-5_RP, 0.4412E-5_RP, 0.2252E-5_RP, 0.9115E-6_RP, 0.4876E-6_RP, 0.3473E-6_RP, 0.4758E-6_RP, 0.6306E-6_RP, 0.8573E-6_RP, 0.7868E-6_RP, 0.7192E-6_RP, 0.6513E-6_RP, 0.5956E-6_RP, 0.5333E-6_RP, 0.4834E-6_RP  /)
real(RP), public             :: a2_tab(32) = (/ 0.0100_RP, 0.4006_RP, 0.4831_RP, 0.5320_RP, 0.5307_RP, 0.5319_RP, 0.5249_RP, 0.4888_RP, 0.3849_RP, 0.4047_RP, 0.4318_RP, 0.4771_RP, 0.5183_RP, 0.5463_RP, 0.5651_RP, 0.5813_RP, 0.5655_RP, 0.5478_RP, 0.5203_RP, 0.4906_RP, 0.4447_RP, 0.4126_RP, 0.3960_RP, 0.4149_RP, 0.4320_RP, 0.4506_RP, 0.4483_RP, 0.4460_RP, 0.4433_RP, 0.4413_RP, 0.4382_RP, 0.4361_RP  /)
real(RP), private            :: Eiw        = 1.0_RP      
real(RP), private            :: Erw        = 1.0_RP      
real(RP), private            :: Esw        = 1.0_RP      
real(RP), private            :: Egw        = 1.0_RP      
real(RP), private            :: Eri        = 1.0_RP      
real(RP), private            :: Esi        = 1.0_RP      
real(RP), private            :: Egi        = 0.1_RP      
real(RP), private            :: Esr        = 1.0_RP      
real(RP), private            :: Egr        = 1.0_RP      
real(RP), private            :: Egs        = 1.0_RP      
real(RP), private            :: gamma_sacr = 25.E-3_RP   
real(RP), private            :: gamma_gacs = 90.E-3_RP   
real(RP), private            :: mi         = 4.19E-13_RP 
real(RP), private, parameter :: Nc_lnd     = 2000.0_RP   
real(RP), private, parameter :: Nc_ocn     =   50.0_RP   
real(RP), private            :: Nc_def                   
real(RP), private            :: beta_saut  =  1.E-3_RP   
real(RP), private            :: gamma_saut = 25.E-3_RP   
real(RP), private            :: beta_gaut  =  1.E-3_RP   
real(RP), private            :: gamma_gaut = 90.E-3_RP   
real(RP), private            :: qicrt_saut =  0.0_RP     
real(RP), private            :: qscrt_gaut =  6.E-4_RP   
real(RP), private, parameter :: Ka0        = 2.428E-2_RP 
real(RP), private, parameter :: dKa_dT     =  7.47E-5_RP 
real(RP), private, parameter :: Kd0        = 2.222E-5_RP 
real(RP), private, parameter :: dKd_dT     =  1.37E-7_RP 
real(RP), private, parameter :: nu0        = 1.718E-5_RP 
real(RP), private, parameter :: dnu_dT     =  5.28E-8_RP 
real(RP), private            :: f1r        = 0.78_RP     
real(RP), private            :: f2r        = 0.27_RP     
real(RP), private            :: f1s        = 0.65_RP     
real(RP), private            :: f2s        = 0.39_RP     
real(RP), private            :: f1g        = 0.78_RP     
real(RP), private            :: f2g        = 0.27_RP     
real(RP), private            :: A_frz      = 0.66_RP     
real(RP), private            :: B_frz      = 100.0_RP    
real(RP), private            :: mi40       = 2.46E-10_RP 
real(RP), private            :: mi50       = 4.80E-10_RP 
real(RP), private            :: vti50      = 1.0_RP      
real(RP), private            :: Ri50       = 5.E-5_RP    
real(RP), private            :: sw_expice  = 0.0_RP      
real(RP), private, parameter :: Nc_ihtr    = 300.0_RP    
real(RP), private, parameter :: Di_max     = 500.E-6_RP
real(RP), private, parameter :: Di_a       = 11.9_RP
integer,  private, parameter :: wk_nmax = 49
integer,  private, parameter :: I_dqv_dt  =  1 
integer,  private, parameter :: I_dqc_dt  =  2 
integer,  private, parameter :: I_dqr_dt  =  3 
integer,  private, parameter :: I_dqi_dt  =  4 
integer,  private, parameter :: I_dqs_dt  =  5 
integer,  private, parameter :: I_dqg_dt  =  6 
integer,  private, parameter :: I_delta1  =  7 
integer,  private, parameter :: I_delta2  =  8 
integer,  private, parameter :: I_spsati  =  9 
integer,  private, parameter :: I_iceflg  = 10 
integer,  private, parameter :: I_RLMDr   = 11
integer,  private, parameter :: I_RLMDs   = 12
integer,  private, parameter :: I_RLMDg   = 13
integer,  private, parameter :: I_Piacr   = 14 
integer,  private, parameter :: I_Psacr   = 15 
integer,  private, parameter :: I_Praci   = 16 
integer,  private, parameter :: I_Pigen   = 17 
integer,  private, parameter :: I_Pidep   = 18 
integer,  private, parameter :: I_Psdep   = 19 
integer,  private, parameter :: I_Pgdep   = 20 
integer,  private, parameter :: I_Praut   = 21 
integer,  private, parameter :: I_Pracw   = 22 
integer,  private, parameter :: I_Pihom   = 23 
integer,  private, parameter :: I_Pihtr   = 24 
integer,  private, parameter :: I_Psacw   = 25 
integer,  private, parameter :: I_Psfw    = 26 
integer,  private, parameter :: I_Pgacw   = 27 
integer,  private, parameter :: I_Prevp   = 28 
integer,  private, parameter :: I_Piacr_s = 29 
integer,  private, parameter :: I_Psacr_s = 30 
integer,  private, parameter :: I_Piacr_g = 31 
integer,  private, parameter :: I_Psacr_g = 32 
integer,  private, parameter :: I_Pgacr   = 33 
integer,  private, parameter :: I_Pgfrz   = 34 
integer,  private, parameter :: I_Pisub   = 35 
integer,  private, parameter :: I_Pimlt   = 36 
integer,  private, parameter :: I_Psaut   = 37 
integer,  private, parameter :: I_Praci_s = 38 
integer,  private, parameter :: I_Psaci   = 39 
integer,  private, parameter :: I_Psfi    = 40 
integer,  private, parameter :: I_Praci_g = 41 
integer,  private, parameter :: I_Pgaci   = 42 
integer,  private, parameter :: I_Pssub   = 43 
integer,  private, parameter :: I_Psmlt   = 44 
integer,  private, parameter :: I_Pgaut   = 45 
integer,  private, parameter :: I_Pracs   = 46 
integer,  private, parameter :: I_Pgacs   = 47 
integer,  private, parameter :: I_Pgsub   = 48 
integer,  private, parameter :: I_Pgmlt   = 49 
character(len=H_SHORT), private :: w_name(wk_nmax)
data w_name / 'dqv_dt ', 'dqc_dt ', 'dqr_dt ', 'dqi_dt ', 'dqs_dt ', 'dqg_dt ', 'delta1 ', 'delta2 ', 'spsati ', 'iceflg ', 'RLMDr  ', 'RLMDs  ', 'RLMDg  ', 'Piacr  ', 'Psacr  ', 'Praci  ', 'Pigen  ', 'Pidep  ', 'Psdep  ', 'Pgdep  ', 'Praut  ', 'Pracw  ', 'Pihom  ', 'Pihtr  ', 'Psacw  ', 'Psfw   ', 'Pgacw  ', 'Prevp  ', 'Piacr_s', 'Psacr_s', 'Piacr_g', 'Psacr_g', 'Pgacr  ', 'Pgfrz  ', 'Pisub  ', 'Pimlt  ', 'Psaut  ', 'Praci_s', 'Psaci  ', 'Psfi   ', 'Praci_g', 'Pgaci  ', 'Pssub  ', 'Psmlt  ', 'Pgaut  ', 'Pracs  ', 'Pgacs  ', 'Pgsub  ', 'Pgmlt  '  /
character(len=H_SHORT), private :: precip_transport_type = '3WATER'
character(len=H_SHORT), private :: precip_scheme_type    = 'Default' 
logical,                private :: OPT_EXPLICIT_ICEGEN   = .false.   
logical,                private :: OPT_INDIR             = .false.   
logical,                private :: Roh_flag              = .false.   
real(RP),               private :: sw_constVti           = 0.0_RP
real(RP),               private :: CONST_Vti                         
@domainDependant{domName(idx3), domSize(32), attribute(host)}
a1_tab, a2_tab
@end domainDependant
@domainDependant{domName(idx4), domSize(10), attribute(host)}
coef_a, coef_b
@end domainDependant
contains
@scheme{name(HOST_ONLY)}
subroutine mp_nsw6_init
implicit none
logical  :: INC_PGAUT   = .false.
real(RP) :: PSAUT_BETA0
character(len=H_SHORT) :: qr_aut_acc_type = 'Default' 
namelist / nm_mp_nsw6 / N0r, N0s, N0g, rho_g, rho_s, C_d, Cr, Cs, Eiw, Erw, Esw, Egw, Eri, Esi, Egi, Esr, Egr, Egs, gamma_sacr, gamma_gacs, mi, Nc_def, PSAUT_BETA0, gamma_saut, qicrt_saut, beta_gaut, gamma_gaut, qscrt_gaut, f1r, f2r, f1s, f2s, f1g, f2g, A_frz, B_frz, precip_scheme_type, precip_transport_type, INC_PGAUT, OPT_EXPLICIT_ICEGEN, OPT_INDIR, CONST_Vti, Roh_flag, qr_aut_acc_type          
integer :: ierr
Nc_def      = Nc_ocn
CONST_Vti   = UNDEF
PSAUT_BETA0 = beta_saut
gamma_sacr=6.E-2_RP
psaut_beta0=5.E-3_RP
gamma_saut=6.E-2_RP
precip_scheme_type="Flux-Semilag_new"
roh_flag=.true.
qr_aut_acc_type="KK2000"
beta_saut = PSAUT_BETA0
write(IO_FID_LOG,*)
write(IO_FID_LOG,*) '*** Calculation flag of sedimentation:'
write(IO_FID_LOG,*) '*** QV => NO'
write(IO_FID_LOG,*) '*** QC => NO'
write(IO_FID_LOG,*) '*** QR => YES'
if    ( precip_transport_type == '3WATER' ) then
write(IO_FID_LOG,*) '*** QI => NO'
elseif( precip_transport_type == '4WATER' ) then
write(IO_FID_LOG,*) '*** QI => YES'
endif
write(IO_FID_LOG,*) '*** QS => YES'
write(IO_FID_LOG,*) '*** QG => YES'
write(IO_FID_LOG,*)
write(IO_FID_LOG,*) '*** Precipitation(sedimentation) scheme:'
if    ( precip_scheme_type == 'Upwind-Euler' ) then
write(IO_FID_LOG,*) '*** => Upwind-Euler'
elseif( precip_scheme_type == 'Flux-Semilag_new' ) then
write(IO_FID_LOG,*) '*** => Flux-Semilag_new'
else
write(IO_FID_LOG,*) '*** => Default(Flux-Semilag)'
endif
Ar = PI * rho_w / 6.0_RP
As = PI * rho_s / 6.0_RP
Ag = PI * rho_g / 6.0_RP
Br = 3.0_RP
Bs = 3.0_RP
Bg = 3.0_RP
Cg = sqrt( ( 4.0_RP * rho_g * GRAV ) / ( 3.0_RP * dens00 * C_d ) )
Dr = 0.50_RP
Ds = 0.25_RP
Dg = 0.50_RP
write(IO_FID_LOG,*)
write(IO_FID_LOG,*) '*** Use setting of Roh and Satoh(2014)?:'
if ( Roh_flag ) then 
write(IO_FID_LOG,*) '*** => Yes'
OPT_EXPLICIT_ICEGEN = .true.
sw_roh2014 = 1.0_RP
N0g        = 4.E+8_RP
As         = 0.069_RP
Bs         = 2.0_RP
Esi        = 0.25_RP
Egi        = 0.0_RP
Egs        = 0.0_RP
else
write(IO_FID_LOG,*) '*** => No : default'
endif
write(IO_FID_LOG,*)
write(IO_FID_LOG,*) '*** Use explicit ice generation scheme?:'
if ( OPT_EXPLICIT_ICEGEN ) then
write(IO_FID_LOG,*) '*** => Yes'
sw_expice = 1.0_RP
else
write(IO_FID_LOG,*) '*** => No : default'
sw_expice = 0.0_RP
endif
write(IO_FID_LOG,*)
write(IO_FID_LOG,*) '*** Autoconversion Accretion scheme for QC->Qr:'
if    ( qr_aut_acc_type == "Default" ) then
write(IO_FID_LOG,*) '*** => Berry(1968) : default'
sw_kk2000 = 0.0_RP
elseif( qr_aut_acc_type == "KK2000" ) then
write(IO_FID_LOG,*) '*** => Khairoutdinov and Kogan(2000)'
sw_kk2000 = 1.0_RP
else
write(*,         *) 'xxx Not appropriate qr_aut_acc_type. STOP', trim(qr_aut_acc_type)
write(IO_FID_LOG,*) 'xxx Not appropriate qr_aut_acc_type. STOP', trim(qr_aut_acc_type)
call ADM_proc_stop
endif
if ( .NOT. INC_PGAUT ) then
beta_gaut = 0.0_RP
endif
if ( CONST_Vti /= UNDEF ) then
CONST_Vti   = abs(CONST_Vti)
sw_constVti = 1.0_RP
else
sw_constVti = 0.0_RP
endif
GAM       = 1.0_RP 
GAM_2     = 1.0_RP 
GAM_3     = 2.0_RP 
GAM_1br   = MISC_gammafunc( 1.0_RP + Br ) 
GAM_2br   = MISC_gammafunc( 2.0_RP + Br ) 
GAM_3br   = MISC_gammafunc( 3.0_RP + Br ) 
GAM_3dr   = MISC_gammafunc( 3.0_RP + Dr )
GAM_6dr   = MISC_gammafunc( 6.0_RP + Dr )
GAM_1brdr = MISC_gammafunc( 1.0_RP + Br + Dr )
GAM_5dr_h = MISC_gammafunc( 0.5_RP * (5.0_RP+Dr) )
GAM_1bs   = MISC_gammafunc( 1.0_RP + Bs ) 
GAM_2bs   = MISC_gammafunc( 2.0_RP + Bs ) 
GAM_3bs   = MISC_gammafunc( 3.0_RP + Bs ) 
GAM_3ds   = MISC_gammafunc( 3.0_RP + Ds )
GAM_1bsds = MISC_gammafunc( 1.0_RP + Bs + Ds )
GAM_5ds_h = MISC_gammafunc( 0.5_RP * (5.0_RP+Ds) )
GAM_1bg   = MISC_gammafunc( 1.0_RP + Bg ) 
GAM_3dg   = MISC_gammafunc( 3.0_RP + Dg )
GAM_1bgdg = MISC_gammafunc( 1.0_RP + Bg + Dg)
GAM_5dg_h = MISC_gammafunc( 0.5_RP * (5.0_RP+Dg) )
ln10 = log(10.0_RP)
return
end subroutine mp_nsw6_init
@end scheme
subroutine mp_nsw6( ijdim, l_region, rhog, rhogvx, rhogvy, rhogvz, rhogw, rhoge, rhogq, vx, vy, vz, w, UNCCN, rho, tem, pre, q, qd, precip, precip_rhoe, precip_lh_heat, precip_rhophi, precip_rhokin, gprec, rceff, rctop, rwtop, tctop, rceff_cld, rctop_cld, rwtop_cld, tctop_cld, gsgam2, gsgam2h, gam2, gam2h, ix, iy, iz, jx, jy, jz, z, dt              )
use mod_thrmdyn, only: THRMDYN_cv_ijk, THRMDYN_qd_ijk
use mod_satadjust, only: SATURATION_psat_liq_2D, SATURATION_psat_ice_2D, SATURATION_setrange, SATURATION_adjustment
use mod_precip_transport, only: precip_transport_new
use mod_debug, only: kdim, kmin, kmax, nqmax, NQW_STR, NQW_END, I_QV, I_QC, I_QR, I_QI, I_QS, I_QG, LHV, LHF
implicit none
integer,  intent(in)    :: ijdim
integer,  intent(in)    :: l_region
real(RP), intent(inout) :: rhog          (ijdim,kdim)
real(RP), intent(inout) :: rhogvx        (ijdim,kdim)
real(RP), intent(inout) :: rhogvy        (ijdim,kdim)
real(RP), intent(inout) :: rhogvz        (ijdim,kdim)
real(RP), intent(inout) :: rhogw         (ijdim,kdim)
real(RP), intent(inout) :: rhoge         (ijdim,kdim)
real(RP), intent(inout) :: rhogq         (ijdim,kdim,nqmax)
real(RP), intent(in)    :: vx            (ijdim,kdim)
real(RP), intent(in)    :: vy            (ijdim,kdim)
real(RP), intent(in)    :: vz            (ijdim,kdim)
real(RP), intent(in)    :: w             (ijdim,kdim)
real(RP), intent(in)    :: UNCCN         (ijdim,kdim)
real(RP), intent(inout) :: rho           (ijdim,kdim)
real(RP), intent(inout) :: tem           (ijdim,kdim)
real(RP), intent(inout) :: pre           (ijdim,kdim)
real(RP), intent(inout) :: q             (ijdim,kdim,nqmax)
real(RP), intent(out)   :: qd            (ijdim,kdim)
real(RP), intent(out)   :: precip        (ijdim,2)
real(RP), intent(out)   :: precip_rhoe   (ijdim)
real(RP), intent(out)   :: precip_lh_heat(ijdim)
real(RP), intent(out)   :: precip_rhophi (ijdim)
real(RP), intent(out)   :: precip_rhokin (ijdim)
real(RP), intent(out)   :: gprec         (ijdim,kdim)
real(RP), intent(out)   :: rceff         (ijdim,kdim)
real(RP), intent(out)   :: rctop         (ijdim,1)
real(RP), intent(out)   :: rwtop         (ijdim,1)
real(RP), intent(out)   :: tctop         (ijdim,1)
real(RP), intent(out)   :: rceff_cld     (ijdim,kdim)
real(RP), intent(out)   :: rctop_cld     (ijdim,1)
real(RP), intent(out)   :: rwtop_cld     (ijdim,1)
real(RP), intent(out)   :: tctop_cld     (ijdim,1)
real(RP), intent(in)    :: gsgam2        (ijdim,kdim)
real(RP), intent(in)    :: gsgam2h       (ijdim,kdim)
real(RP), intent(in)    :: gam2          (ijdim,kdim)
real(RP), intent(in)    :: gam2h         (ijdim,kdim)
real(RP), intent(in)    :: ix            (ijdim)
real(RP), intent(in)    :: iy            (ijdim)
real(RP), intent(in)    :: iz            (ijdim)
real(RP), intent(in)    :: jx            (ijdim)
real(RP), intent(in)    :: jy            (ijdim)
real(RP), intent(in)    :: jz            (ijdim)
real(RP), intent(in)    :: z             (ijdim,kdim)
real(RP), intent(in)    :: dt
real(RP) :: drhogqv(ijdim,kdim)
real(RP) :: drhogqc(ijdim,kdim)
real(RP) :: drhogqi(ijdim,kdim)
real(RP) :: drhogqr(ijdim,kdim)
real(RP) :: drhogqs(ijdim,kdim)
real(RP) :: drhogqg(ijdim,kdim)
real(RP) :: psatl(ijdim,kdim)
real(RP) :: qsatl(ijdim,kdim)                
real(RP) :: psati(ijdim,kdim)
real(RP) :: qsati(ijdim,kdim)                
real(RP) :: Nc   (ijdim,kdim)                
real(RP) :: dens                             
real(RP) :: temp                             
real(RP) :: qv                               
real(RP) :: qc                               
real(RP) :: qr                               
real(RP) :: qi                               
real(RP) :: qs                               
real(RP) :: qg                               
real(RP) :: qv_t                             
real(RP) :: qc_t                             
real(RP) :: qr_t                             
real(RP) :: qi_t                             
real(RP) :: qs_t                             
real(RP) :: qg_t                             
real(RP) :: Sliq                             
real(RP) :: Sice                             
real(RP) :: Rdens                            
real(RP) :: rho_fact                         
real(RP) :: temc                             
real(RP) :: RLMDr, RLMDr_2, RLMDr_3
real(RP) :: RLMDs, RLMDs_2, RLMDs_3
real(RP) :: RLMDg, RLMDg_2, RLMDg_3
real(RP) :: RLMDr_1br, RLMDr_2br, RLMDr_3br
real(RP) :: RLMDs_1bs, RLMDs_2bs, RLMDs_3bs
real(RP) :: RLMDr_dr, RLMDr_3dr, RLMDr_5dr
real(RP) :: RLMDs_ds, RLMDs_3ds, RLMDs_5ds
real(RP) :: RLMDg_dg, RLMDg_3dg, RLMDg_5dg
real(RP) :: RLMDr_7
real(RP) :: RLMDr_6dr
real(RP) :: tems, Xs2
real(RP) :: MOMs_0, MOMs_1, MOMs_2
real(RP) :: MOMs_0bs, MOMs_1bs, MOMs_2bs
real(RP) :: MOMs_2ds, MOMs_5ds_h, RMOMs_Vt
real(RP) :: coef_at(4), coef_bt(4)
real(RP) :: loga_, b_, nm
real(RP) :: Vti, Vtr, Vts, Vtg               
real(RP) :: Esi_mod, Egs_mod                 
real(RP) :: rhoqc                            
real(RP) :: Pracw_orig,  Pracw_kk            
real(RP) :: Praut_berry, Praut_kk            
real(RP) :: Dc                               
real(RP) :: betai, betas                     
real(RP) :: Ka                               
real(RP) :: Kd                               
real(RP) :: Nu                               
real(RP) :: Glv, Giv, Gil                    
real(RP) :: ventr, vents, ventg              
real(RP) :: net, fac, fac_sw
real(RP) :: zerosw, tmp
real(RP) :: sw_bergeron                      
real(RP) :: a1 (ijdim,kdim)                  
real(RP) :: a2 (ijdim,kdim)                  
real(RP) :: ma2(ijdim,kdim)                  
real(RP) :: dt1                              
real(RP) :: Ni50                             
real(RP) :: sw, rhoqi, XNi, XMi, Di, Ni0, Qi0
real(RP), parameter :: r2_min = 1.E-10_RP
real(RP), parameter :: q_min  = 1.E-5_RP
real(RP)            :: xf_qc                 
real(RP)            :: rf_qc                 
real(RP)            :: r2_qc                 
real(RP)            :: r2_qr                 
real(RP)            :: r3_qc                 
real(RP)            :: r3_qr                 
real(RP)            :: dgamma_a, GAM_dgam23, GAM_dgam
real(RP)            :: coef_dgam, coef_xf
logical  :: preciptation_flag(nqmax)
real(RP) :: Vt    (ijdim,kdim,nqmax)
real(RP) :: cva   (ijdim,kdim)
real(RP) :: rgs   (ijdim,kdim)
real(RP) :: rgsh  (ijdim,kdim)
real(RP) :: wk      (wk_nmax)
real(RP) :: ml_Pconv(ijdim,kdim)
real(RP) :: ml_Pconw(ijdim,kdim)
real(RP) :: ml_Pconi(ijdim,kdim)
real(RP) :: UNDEF, EPS, PI, Rvap, LHV0, LHS0, LHF0, PRE00
integer, parameter :: simdlen = 8
integer  :: blk, vec, veclen
integer  :: ij, k, nq, ip
@domainDependant{attribute(autoDom, present)}
rhog, rhogvx, rhogvy, rhogvz, rhogw, rhoge, rhogq, vx, vy, vz, w,
UNCCN, rho, tem, pre, q, qd, precip, precip_rhoe, precip_lh_heat, precip_rhophi, precip_rhokin,
gprec, rceff, rctop, rwtop, tctop, rceff_cld, rctop_cld, rwtop_cld, tctop_cld,
gsgam2, gsgam2h, gam2, gam2h, ix, iy, iz, jx, jy, jz, z
drhogqv, drhogqc, drhogqi, drhogqr, drhogqs, drhogqg,
psatl, qsatl, psati, qsati, Nc,
a1, a2, ma2,
Vt, cva, rgs, rgsh, wk, ml_Pconv, ml_Pconw, ml_Pconi
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(ij,k), domSize(ijdim,kdim)}
coef_at, coef_bt
@end domainDependant
call PROF_rapstart('____MP_NSW6')
UNDEF = CONST_UNDEF
EPS   = CONST_EPS
PI    = CONST_PI
Rvap  = CONST_Rvap
LHV0  = CONST_LHV0
LHS0  = CONST_LHS0
LHF0  = CONST_LHF0
PRE00 = CONST_Pstd
call negative_filter( ijdim, rhog  (:,:), rhoge (:,:), rhogq (:,:,:), rho   (:,:), tem   (:,:), pre   (:,:), q     (:,:,:), gsgam2(:,:)    ) 
if ( OPT_INDIR ) then  
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
Nc(ij,k) = max( UNCCN(ij,k)*1.E-6_RP, Nc_def ) 
@end parallelRegion
else
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
Nc(ij,k) = Nc_def
@end parallelRegion
endif
call SATURATION_psat_liq_2D( ijdim, kdim, tem(:,:), psatl(:,:) )
call SATURATION_psat_ice_2D( ijdim, kdim, tem(:,:), psati(:,:) )
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
qsatl(ij,k) = psatl(ij,k) / ( rho(ij,k) * Rvap * tem(ij,k) )
qsati(ij,k) = psati(ij,k) / ( rho(ij,k) * Rvap * tem(ij,k) )
@end parallelRegion
call Bergeron_param( ijdim, tem(:,:), a1 (:,:), a2 (:,:), ma2(:,:)  ) 
Dc         = 0.146_RP - 5.964E-2_RP * log( Nc_def / 2000.0_RP )
dgamma_a   = 0.1444_RP / Dc**2
GAM_dgam   = MISC_gammafunc( dgamma_a )
GAM_dgam23 = MISC_gammafunc( dgamma_a + 2.0_RP/3.0_RP )
coef_dgam  = GAM_dgam23 / GAM_dgam * dgamma_a**(-2.0_RP/3.0_RP)
coef_xf    = 3.0_RP / 4.0_RP / PI / rho_w
if ( TIME_CSTEP == EX_STEP ) then
call PROF_rapstart('_kernel_partM12')
endif
@parallelRegion{domName(ij,k), domSize(ijdim,kdim), startAt(1,kmin), endAt(ijdim,kmax)}
dens     = rho(ij,k)
temp     = tem(ij,k)
qv       = max( q(ij,k,I_QV), 0.0_RP )
qc       = max( q(ij,k,I_QC), 0.0_RP )
qr       = max( q(ij,k,I_QR), 0.0_RP )
qi       = max( q(ij,k,I_QI), 0.0_RP )
qs       = max( q(ij,k,I_QS), 0.0_RP )
qg       = max( q(ij,k,I_QG), 0.0_RP )
Sliq     = qv / max( qsatl(ij,k), EPS )
Sice     = qv / max( qsati(ij,k), EPS )
Rdens    = 1.0_RP / dens
rho_fact = sqrt( dens00 * Rdens )
temc     = temp - TEM00
wk(I_delta1) = ( 0.5_RP + sign(0.5_RP, qr - 1.E-4_RP ) )
wk(I_delta2) = ( 0.5_RP + sign(0.5_RP, 1.E-4_RP - qr ) ) * ( 0.5_RP + sign(0.5_RP, 1.E-4_RP - qs ) )
wk(I_spsati) = 0.5_RP + sign(0.5_RP, Sice - 1.0_RP )
wk(I_iceflg) = 0.5_RP - sign( 0.5_RP, temc ) 
wk(I_dqv_dt) = qv / dt
wk(I_dqc_dt) = qc / dt
wk(I_dqr_dt) = qr / dt
wk(I_dqi_dt) = qi / dt
wk(I_dqs_dt) = qs / dt
wk(I_dqg_dt) = qg / dt
sw_bergeron = ( 0.5_RP + sign(0.5_RP, temc + 30.0_RP ) ) * ( 0.5_RP + sign(0.5_RP, 0.0_RP - temc  ) ) * ( 1.0_RP - sw_expice                     )
zerosw = 0.5_RP - sign(0.5_RP, qr - 1.E-12_RP )
RLMDr  = sqrt(sqrt( dens * qr / ( Ar * N0r * GAM_1br ) + zerosw )) * ( 1.0_RP - zerosw )
RLMDr_dr  = sqrt( RLMDr )       
RLMDr_2   = RLMDr**2
RLMDr_3   = RLMDr**3
RLMDr_7   = RLMDr**7
RLMDr_1br = RLMDr**4 
RLMDr_2br = RLMDr**5 
RLMDr_3br = RLMDr**6 
RLMDr_3dr = RLMDr**3 * RLMDr_dr
RLMDr_5dr = RLMDr**5 * RLMDr_dr
RLMDr_6dr = RLMDr**6 * RLMDr_dr
zerosw = 0.5_RP - sign(0.5_RP, qs - 1.E-12_RP )
RLMDs  = sqrt(sqrt( dens * qs / ( As * N0s * GAM_1bs ) + zerosw )) * ( 1.0_RP - zerosw )
RLMDs_ds  = sqrt( sqrt(RLMDs) ) 
RLMDs_2   = RLMDs**2
RLMDs_3   = RLMDs**3
RLMDs_1bs = RLMDs**4 
RLMDs_2bs = RLMDs**5 
RLMDs_3bs = RLMDs**6 
RLMDs_3ds = RLMDs**3 * RLMDs_ds
RLMDs_5ds = RLMDs**5 * RLMDs_ds
MOMs_0     = N0s * GAM       * RLMDs           
MOMs_1     = N0s * GAM_2     * RLMDs_2         
MOMs_2     = N0s * GAM_3     * RLMDs_3         
MOMs_0bs   = N0s * GAM_1bs   * RLMDs_1bs       
MOMs_1bs   = N0s * GAM_2bs   * RLMDs_2bs       
MOMs_2bs   = N0s * GAM_3bs   * RLMDs_3bs       
MOMs_2ds   = N0s * GAM_3ds   * RLMDs_3ds       
MOMs_5ds_h = N0s * GAM_5ds_h * sqrt(RLMDs_5ds) 
RMOMs_Vt   = GAM_1bsds / GAM_1bs * RLMDs_ds
Xs2    = dens * qs / As
zerosw = 0.5_RP - sign(0.5_RP, Xs2 - 1.E-12_RP )
tems       = min( -0.1_RP, temc )
coef_at(1) = coef_a( 1) + tems * ( coef_a( 2) + tems * ( coef_a( 5) + tems * coef_a( 9) ) )
coef_at(2) = coef_a( 3) + tems * ( coef_a( 4) + tems *   coef_a( 7) )
coef_at(3) = coef_a( 6) + tems *   coef_a( 8)
coef_at(4) = coef_a(10)
coef_bt(1) = coef_b( 1) + tems * ( coef_b( 2) + tems * ( coef_b( 5) + tems * coef_b( 9) ) )
coef_bt(2) = coef_b( 3) + tems * ( coef_b( 4) + tems *   coef_b( 7) )
coef_bt(3) = coef_b( 6) + tems *   coef_b( 8)
coef_bt(4) = coef_b(10)
loga_ = coef_at(1)
b_    = coef_bt(1)
MOMs_0 = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_0
nm = 1.0_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
MOMs_1 = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_1
MOMs_2 = (        sw_roh2014 ) * Xs2 + ( 1.0_RP-sw_roh2014 ) * MOMs_2
nm = 2.0_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
MOMs_0bs = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_0bs
nm = 3.0_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
MOMs_1bs = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_1bs
nm = 4.0_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
MOMs_2bs = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_2bs
nm = 2.25_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
MOMs_2ds = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_2ds
nm = 1.625_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
MOMs_5ds_h = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) + ( 1.0_RP-sw_roh2014 ) * MOMs_5ds_h
nm = 2.25_RP
loga_ = coef_at(1) + nm * ( coef_at(2) + nm * ( coef_at(3) + nm * coef_at(4) ) )
b_    = coef_bt(1) + nm * ( coef_bt(2) + nm * ( coef_bt(3) + nm * coef_bt(4) ) )
RMOMs_Vt = (        sw_roh2014 ) * exp(ln10*loga_) * exp(log(Xs2+zerosw)*b_) * ( 1.0_RP-zerosw ) / ( MOMs_0bs + zerosw ) + ( 1.0_RP-sw_roh2014 ) * RMOMs_Vt
zerosw = 0.5_RP - sign(0.5_RP, qg - 1.E-12_RP )
RLMDg  = sqrt(sqrt( dens * qg / ( Ag * N0g * GAM_1bg ) + zerosw )) * ( 1.0_RP - zerosw )
RLMDg_dg  = sqrt( RLMDg )       
RLMDg_2   = RLMDg**2
RLMDg_3   = RLMDg**3
RLMDg_3dg = RLMDg**3 * RLMDg_dg
RLMDg_5dg = RLMDg**5 * RLMDg_dg
wk(I_RLMDr) = RLMDr
wk(I_RLMDs) = RLMDs
wk(I_RLMDg) = RLMDg
zerosw = 0.5_RP - sign(0.5_RP, qi - 1.E-8_RP )
Vti = ( 1.0_RP-sw_constVti ) * (-3.29_RP) * exp( log( dens*qi+zerosw )*0.16_RP ) * ( 1.0_RP-zerosw ) + (        sw_constVti ) * (-CONST_Vti)
Vtr = -Cr * rho_fact * GAM_1brdr / GAM_1br * RLMDr_dr
Vts = -Cs * rho_fact * RMOMs_Vt
Vtg = -Cg * rho_fact * GAM_1bgdg / GAM_1bg * RLMDg_dg
Ni0 = max( exp(-0.1_RP*temc), 1.0_RP ) * 1000.0_RP
Qi0 = 4.92E-11_RP * exp(log(Ni0)*1.33_RP) * Rdens
wk(I_Pigen) = max( min( Qi0-qi, qv-qsati(ij,k) ), 0.0_RP ) / dt
Esi_mod = min( Esi, Esi * exp( gamma_sacr * temc ) )
Egs_mod = min( Egs, Egs * exp( gamma_gacs * temc ) )
Pracw_orig = qc * 0.25_RP * PI * Erw * N0r * Cr * GAM_3dr * RLMDr_3dr * rho_fact
zerosw     = 0.5_RP - sign(0.5_RP, qc*qr - 1.E-12_RP )
Pracw_kk   = 67.0_RP * exp( log( qc*qr+zerosw )*1.15_RP ) * ( 1.0_RP-zerosw ) 
wk(I_Pracw) = ( 1.0_RP-sw_kk2000 ) * Pracw_orig + (        sw_kk2000 ) * Pracw_kk
wk(I_Psacw) = qc * 0.25_RP * PI * Esw       * Cs * MOMs_2ds            * rho_fact
wk(I_Pgacw) = qc * 0.25_RP * PI * Egw * N0g * Cg * GAM_3dg * RLMDg_3dg * rho_fact
wk(I_Praci) = qi * 0.25_RP * PI * Eri * N0r * Cr * GAM_3dr * RLMDr_3dr * rho_fact
wk(I_Psaci) = qi * 0.25_RP * PI * Esi_mod   * Cs * MOMs_2ds            * rho_fact
wk(I_Pgaci) = qi * 0.25_RP * PI * Egi * N0g * Cg * GAM_3dg * RLMDg_3dg * rho_fact
wk(I_Piacr) = qi * Ar / mi * 0.25_RP * PI * Eri * N0r * Cr * GAM_6dr * RLMDr_6dr * rho_fact
wk(I_Psacr) = Ar * 0.25_RP * PI * Rdens * Esr * N0r       * abs(Vtr-Vts) * (          GAM_1br * RLMDr_1br * MOMs_2 + 2.0_RP * GAM_2br * RLMDr_2br * MOMs_1 +          GAM_3br * RLMDr_3br * MOMs_0          )
wk(I_Pgacr) = Ar * 0.25_RP * PI * Rdens * Egr * N0g * N0r * abs(Vtg-Vtr) * (          GAM_1br * RLMDr_1br * GAM_3 * RLMDg_3 + 2.0_RP * GAM_2br * RLMDr_2br * GAM_2 * RLMDg_2 +          GAM_3br * RLMDr_3br * GAM   * RLMDg   )
wk(I_Pracs) = As * 0.25_RP * PI * Rdens * Esr       *  N0r * abs(Vtr-Vts) * (          MOMs_0bs            * GAM_3 * RLMDr_3 + 2.0_RP * MOMs_1bs            * GAM_2 * RLMDr_2 +          MOMs_2bs            * GAM   * RLMDr   )
wk(I_Pgacs) = As * 0.25_RP * PI * Rdens * Egs_mod   * N0g * abs(Vtg-Vts) * (          MOMs_0bs            * GAM_3 * RLMDg_3 + 2.0_RP * MOMs_1bs            * GAM_2 * RLMDg_2 +          MOMs_2bs            * GAM   * RLMDg   )
rhoqc = dens * qc * 1000.0_RP 
Dc    = 0.146_RP - 5.964E-2_RP * log( Nc(ij,k) / 2000.0_RP )
Praut_berry = Rdens * 1.67E-5_RP * rhoqc * rhoqc / ( 5.0_RP + 3.66E-2_RP * Nc(ij,k) / ( Dc * rhoqc + EPS ) )
zerosw      = 0.5_RP - sign(0.5_RP, qc - 1.E-12_RP )
Praut_kk    = 1350.0_RP * exp( log( qc+zerosw )*2.47_RP ) * ( 1.0_RP-zerosw ) * exp( log( Nc(ij,k) )*(-1.79_RP) )                     
Praut_kk    = 1350.0_RP * qc**2.47_RP * Nc(ij,k)**(-1.79_RP)
wk(I_Praut) = ( 1.0_RP-sw_kk2000 ) * Praut_berry + (        sw_kk2000 ) * Praut_kk
betai = min( beta_saut, beta_saut * exp( gamma_saut * temc ) )
wk(I_Psaut) = max( betai*(qi-qicrt_saut), 0.0_RP )
betas = min( beta_gaut, beta_gaut * exp( gamma_gaut * temc ) )
wk(I_Pgaut) = max( betas*(qs-qscrt_gaut), 0.0_RP )
Ka  = ( Ka0 + dKa_dT * temc )
Kd  = ( Kd0 + dKd_dT * temc ) * PRE00 / pre(ij,k)
NU  = ( nu0 + dnu_dT * temc ) * Rdens
Glv = 1.0_RP / ( LHV0/(Ka*temp) * ( LHV0/(Rvap*temp) - 1.0_RP ) + 1.0_RP/(Kd*dens*QSATL(ij,k)) )
Giv = 1.0_RP / ( LHS0/(Ka*temp) * ( LHS0/(Rvap*temp) - 1.0_RP ) + 1.0_RP/(Kd*dens*QSATI(ij,k)) )
Gil = 1.0_RP / ( LHF0/(Ka*temc) )
ventr = f1r * GAM_2 * RLMDr_2 + f2r * sqrt( Cr * rho_fact / NU * RLMDr_5dr ) * GAM_5dr_h
wk(I_Prevp) = 2.0_RP * PI * Rdens * N0r * ( 1.0_RP-min(Sliq,1.0_RP) ) * Glv * ventr
rhoqi = max(dens*qi,EPS)
XNi   = min( max( 5.38E+7_RP * exp( log(rhoqi)*0.75_RP ), 1.E+3_RP ), 1.E+6_RP )
XMi   = rhoqi / XNi
Di    = min( Di_a * sqrt(XMi), Di_max )
tmp = 4.0_RP * Di * XNi * Rdens * ( Sice-1.0_RP ) * Giv
wk(I_Pidep) = (        wk(I_spsati) ) * ( tmp) 
wk(I_Pisub) = ( 1.0_RP-wk(I_spsati) ) * (-tmp) 
sw = ( 0.5_RP - sign(0.5_RP, temc + 40.0_RP ) ) 
wk(I_Pihom) = sw * qc / dt
sw = ( 0.5_RP + sign(0.5_RP, temc + 40.0_RP ) ) * ( 0.5_RP - sign(0.5_RP, temc           ) ) 
wk(I_Pihtr) = sw * ( dens / rho_w * qc**2 / ( Nc_ihtr * 1.E+6_RP ) ) * B_frz * ( exp(-A_frz*temc) - 1.0_RP )
sw = ( 0.5_RP + sign(0.5_RP, temc           ) ) 
wk(I_Pimlt) = sw * qi / dt
vents = f1s * MOMs_1          + f2s * sqrt( Cs * rho_fact / NU             ) * MOMs_5ds_h
tmp = 2.0_RP * PI * Rdens *       ( Sice-1.0_RP ) * Giv * vents
wk(I_Psdep) = (        wk(I_spsati) ) * ( tmp) 
wk(I_Pssub) = ( 1.0_RP-wk(I_spsati) ) * (-tmp) 
wk(I_Psmlt) = 2.0_RP * PI * Rdens *       Gil * vents + CL * temc / LHF0 * ( wk(I_Psacw) + wk(I_Psacr) )
wk(I_Psmlt) = max( wk(I_Psmlt), 0.0_RP )
ventg = f1g * GAM_2 * RLMDg_2 + f2g * sqrt( Cg * rho_fact / NU * RLMDg_5dg ) * GAM_5dg_h
tmp = 2.0_RP * PI * Rdens * N0g * ( Sice-1.0_RP ) * Giv * ventg
wk(I_Pgdep) = (        wk(I_spsati) ) * ( tmp) 
wk(I_Pgsub) = ( 1.0_RP-wk(I_spsati) ) * (-tmp) 
wk(I_Pgmlt) = 2.0_RP * PI * Rdens * N0g * Gil * ventg + CL * temc / LHF0 * ( wk(I_Pgacw) + wk(I_Pgacr) )
wk(I_Pgmlt) = max( wk(I_Pgmlt), 0.0_RP )
wk(I_Pgfrz) = 2.0_RP * PI * Rdens * N0r * 60.0_RP * B_frz * Ar * ( exp(-A_frz*temc) - 1.0_RP ) * RLMDr_7
dt1  = ( exp( log(mi50)*ma2(ij,k) ) - exp( log(mi40)*ma2(ij,k) ) ) / ( a1(ij,k) * ma2(ij,k) )
Ni50 = qi * dt / ( mi50 * dt1 )
wk(I_Psfw) = Ni50 * ( a1(ij,k) * mi50**a2(ij,k) + PI * Eiw * dens * qc * Ri50*Ri50 * vti50 )
wk(I_Psfi) = qi / dt1
wk(I_Pigen) = min( wk(I_Pigen), wk(I_dqv_dt) ) * (        wk(I_iceflg) ) * sw_expice
wk(I_Pidep) = min( wk(I_Pidep), wk(I_dqv_dt) ) * (        wk(I_iceflg) ) * sw_expice
wk(I_Psdep) = min( wk(I_Psdep), wk(I_dqv_dt) ) * (        wk(I_iceflg) )
wk(I_Pgdep) = min( wk(I_Pgdep), wk(I_dqv_dt) ) * (        wk(I_iceflg) )
wk(I_Pracw) = wk(I_Pracw) + wk(I_Psacw) * ( 1.0_RP-wk(I_iceflg) ) + wk(I_Pgacw) * ( 1.0_RP-wk(I_iceflg) )   
wk(I_Praut) = min( wk(I_Praut), wk(I_dqc_dt) )
wk(I_Pracw) = min( wk(I_Pracw), wk(I_dqc_dt) )
wk(I_Pihom) = min( wk(I_Pihom), wk(I_dqc_dt) ) * (        wk(I_iceflg) ) * sw_expice
wk(I_Pihtr) = min( wk(I_Pihtr), wk(I_dqc_dt) ) * (        wk(I_iceflg) ) * sw_expice
wk(I_Psacw) = min( wk(I_Psacw), wk(I_dqc_dt) ) * (        wk(I_iceflg) )
wk(I_Psfw ) = min( wk(I_Psfw ), wk(I_dqc_dt) ) * (        wk(I_iceflg) ) * sw_bergeron
wk(I_Pgacw) = min( wk(I_Pgacw), wk(I_dqc_dt) ) * (        wk(I_iceflg) )
wk(I_Prevp) = min( wk(I_Prevp), wk(I_dqr_dt) )
wk(I_Piacr) = min( wk(I_Piacr), wk(I_dqr_dt) ) * (        wk(I_iceflg) )
wk(I_Psacr) = min( wk(I_Psacr), wk(I_dqr_dt) ) * (        wk(I_iceflg) )
wk(I_Pgacr) = min( wk(I_Pgacr), wk(I_dqr_dt) ) * (        wk(I_iceflg) )
wk(I_Pgfrz) = min( wk(I_Pgfrz), wk(I_dqr_dt) ) * (        wk(I_iceflg) )
wk(I_Pisub) = min( wk(I_Pisub), wk(I_dqi_dt) ) * (        wk(I_iceflg) ) * sw_expice
wk(I_Pimlt) = min( wk(I_Pimlt), wk(I_dqi_dt) ) * ( 1.0_RP-wk(I_iceflg) ) * sw_expice
wk(I_Psaut) = min( wk(I_Psaut), wk(I_dqi_dt) ) * (        wk(I_iceflg) )
wk(I_Praci) = min( wk(I_Praci), wk(I_dqi_dt) ) * (        wk(I_iceflg) )
wk(I_Psaci) = min( wk(I_Psaci), wk(I_dqi_dt) ) * (        wk(I_iceflg) )
wk(I_Psfi ) = min( wk(I_Psfi ), wk(I_dqi_dt) ) * (        wk(I_iceflg) ) * sw_bergeron
wk(I_Pgaci) = min( wk(I_Pgaci), wk(I_dqi_dt) ) * (        wk(I_iceflg) )
wk(I_Pssub) = min( wk(I_Pssub), wk(I_dqs_dt) ) * (        wk(I_iceflg) )
wk(I_Psmlt) = min( wk(I_Psmlt), wk(I_dqs_dt) ) * ( 1.0_RP-wk(I_iceflg) )
wk(I_Pgaut) = min( wk(I_Pgaut), wk(I_dqs_dt) ) * (        wk(I_iceflg) )
wk(I_Pracs) = min( wk(I_Pracs), wk(I_dqs_dt) ) * (        wk(I_iceflg) )
wk(I_Pgacs) = min( wk(I_Pgacs), wk(I_dqs_dt) )
wk(I_Pgsub) = min( wk(I_Pgsub), wk(I_dqg_dt) ) * (        wk(I_iceflg) )
wk(I_Pgmlt) = min( wk(I_Pgmlt), wk(I_dqg_dt) ) * ( 1.0_RP-wk(I_iceflg) )
wk(I_Piacr_s) = ( 1.0_RP - wk(I_delta1) ) * wk(I_Piacr)
wk(I_Piacr_g) = (          wk(I_delta1) ) * wk(I_Piacr)
wk(I_Praci_s) = ( 1.0_RP - wk(I_delta1) ) * wk(I_Praci)
wk(I_Praci_g) = (          wk(I_delta1) ) * wk(I_Praci)
wk(I_Psacr_s) = (          wk(I_delta2) ) * wk(I_Psacr)
wk(I_Psacr_g) = ( 1.0_RP - wk(I_delta2) ) * wk(I_Psacr)
wk(I_Pracs  ) = ( 1.0_RP - wk(I_delta2) ) * wk(I_Pracs)
net = + wk(I_Pimlt  ) - wk(I_Praut  ) - wk(I_Pracw  ) - wk(I_Pihom  ) - wk(I_Pihtr  ) - wk(I_Psacw  ) - wk(I_Psfw   ) - wk(I_Pgacw  )   
fac_sw = 0.5_RP + sign( 0.5_RP, net+EPS ) 
fac    = (          fac_sw ) + ( 1.0_RP - fac_sw ) * min( -wk(I_dqc_dt)/(net-fac_sw), 1.0_RP ) 
wk(I_Pimlt  ) = wk(I_Pimlt  ) * fac
wk(I_Praut  ) = wk(I_Praut  ) * fac
wk(I_Pracw  ) = wk(I_Pracw  ) * fac
wk(I_Pihom  ) = wk(I_Pihom  ) * fac
wk(I_Pihtr  ) = wk(I_Pihtr  ) * fac
wk(I_Psacw  ) = wk(I_Psacw  ) * fac
wk(I_Psfw   ) = wk(I_Psfw   ) * fac
wk(I_Pgacw  ) = wk(I_Pgacw  ) * fac
net = + wk(I_Pigen  ) + wk(I_Pidep  ) + wk(I_Pihom  ) + wk(I_Pihtr  ) - wk(I_Pisub  ) - wk(I_Pimlt  ) - wk(I_Psaut  ) - wk(I_Praci_s) - wk(I_Psaci  ) - wk(I_Psfi   ) - wk(I_Praci_g) - wk(I_Pgaci  )   
fac_sw = 0.5_RP + sign( 0.5_RP, net+EPS ) 
fac    = (          fac_sw ) + ( 1.0_RP - fac_sw ) * min( -wk(I_dqi_dt)/(net-fac_sw), 1.0_RP ) 
wk(I_Pigen  ) = wk(I_Pigen  ) * fac
wk(I_Pidep  ) = wk(I_Pidep  ) * fac
wk(I_Pihom  ) = wk(I_Pihom  ) * fac
wk(I_Pihtr  ) = wk(I_Pihtr  ) * fac
wk(I_Pisub  ) = wk(I_Pisub  ) * fac
wk(I_Pimlt  ) = wk(I_Pimlt  ) * fac
wk(I_Psaut  ) = wk(I_Psaut  ) * fac
wk(I_Praci_s) = wk(I_Praci_s) * fac
wk(I_Psaci  ) = wk(I_Psaci  ) * fac
wk(I_Psfi   ) = wk(I_Psfi   ) * fac
wk(I_Praci_g) = wk(I_Praci_g) * fac
wk(I_Pgaci  ) = wk(I_Pgaci  ) * fac
net = + wk(I_Praut  ) + wk(I_Pracw  ) + wk(I_Psmlt  ) + wk(I_Pgmlt  ) - wk(I_Prevp  ) - wk(I_Piacr_s) - wk(I_Psacr_s) - wk(I_Piacr_g) - wk(I_Psacr_g) - wk(I_Pgacr  ) - wk(I_Pgfrz  )   
fac_sw = 0.5_RP + sign( 0.5_RP, net+EPS ) 
fac    = (          fac_sw ) + ( 1.0_RP - fac_sw ) * min( -wk(I_dqr_dt)/(net-fac_sw), 1.0_RP ) 
wk(I_Praut  ) = wk(I_Praut  ) * fac
wk(I_Pracw  ) = wk(I_Pracw  ) * fac
wk(I_Psmlt  ) = wk(I_Psmlt  ) * fac
wk(I_Pgmlt  ) = wk(I_Pgmlt  ) * fac
wk(I_Prevp  ) = wk(I_Prevp  ) * fac
wk(I_Piacr_s) = wk(I_Piacr_s) * fac
wk(I_Psacr_s) = wk(I_Psacr_s) * fac
wk(I_Piacr_g) = wk(I_Piacr_g) * fac
wk(I_Psacr_g) = wk(I_Psacr_g) * fac
wk(I_Pgacr  ) = wk(I_Pgacr  ) * fac
wk(I_Pgfrz  ) = wk(I_Pgfrz  ) * fac
net = + wk(I_Prevp  ) + wk(I_Pisub  ) + wk(I_Pssub  ) + wk(I_Pgsub  ) - wk(I_Pigen  ) - wk(I_Pidep  ) - wk(I_Psdep  ) - wk(I_Pgdep  )   
fac_sw = 0.5_RP + sign( 0.5_RP, net+EPS ) 
fac    = (          fac_sw ) + ( 1.0_RP - fac_sw ) * min( -wk(I_dqv_dt)/(net-fac_sw), 1.0_RP ) 
wk(I_Prevp  ) = wk(I_Prevp  ) * fac
wk(I_Pisub  ) = wk(I_Pisub  ) * fac
wk(I_Pssub  ) = wk(I_Pssub  ) * fac
wk(I_Pgsub  ) = wk(I_Pgsub  ) * fac
wk(I_Pigen  ) = wk(I_Pigen  ) * fac
wk(I_Pidep  ) = wk(I_Pidep  ) * fac
wk(I_Psdep  ) = wk(I_Psdep  ) * fac
wk(I_Pgdep  ) = wk(I_Pgdep  ) * fac
net = + wk(I_Psdep  ) + wk(I_Psacw  ) + wk(I_Psfw   ) + wk(I_Piacr_s) + wk(I_Psacr_s) + wk(I_Psaut  ) + wk(I_Praci_s) + wk(I_Psaci  ) + wk(I_Psfi   ) - wk(I_Pssub  ) - wk(I_Psmlt  ) - wk(I_Pgaut  ) - wk(I_Pracs  ) - wk(I_Pgacs  )   
fac_sw = 0.5_RP + sign( 0.5_RP, net+EPS ) 
fac    = (          fac_sw ) + ( 1.0_RP - fac_sw ) * min( -wk(I_dqs_dt)/(net-fac_sw), 1.0_RP ) 
wk(I_Psdep  ) = wk(I_Psdep  ) * fac
wk(I_Psacw  ) = wk(I_Psacw  ) * fac
wk(I_Psfw   ) = wk(I_Psfw   ) * fac
wk(I_Piacr_s) = wk(I_Piacr_s) * fac
wk(I_Psacr_s) = wk(I_Psacr_s) * fac
wk(I_Psaut  ) = wk(I_Psaut  ) * fac
wk(I_Praci_s) = wk(I_Praci_s) * fac
wk(I_Psaci  ) = wk(I_Psaci  ) * fac
wk(I_Psfi   ) = wk(I_Psfi   ) * fac
wk(I_Pssub  ) = wk(I_Pssub  ) * fac
wk(I_Psmlt  ) = wk(I_Psmlt  ) * fac
wk(I_Pgaut  ) = wk(I_Pgaut  ) * fac
wk(I_Pracs  ) = wk(I_Pracs  ) * fac
wk(I_Pgacs  ) = wk(I_Pgacs  ) * fac
net = + wk(I_Pgdep  ) + wk(I_Pgacw  ) + wk(I_Piacr_g) + wk(I_Psacr_g) + wk(I_Pgacr  ) + wk(I_Pgfrz  ) + wk(I_Praci_g) + wk(I_Pgaci  ) + wk(I_Pgaut  ) + wk(I_Pracs  ) + wk(I_Pgacs  ) - wk(I_Pgsub  ) - wk(I_Pgmlt  )   
fac_sw = 0.5_RP + sign( 0.5_RP, net+EPS ) 
fac    = (          fac_sw ) + ( 1.0_RP - fac_sw ) * min( -wk(I_dqg_dt)/(net-fac_sw), 1.0_RP ) 
wk(I_Pgdep  ) = wk(I_Pgdep  ) * fac
wk(I_Pgacw  ) = wk(I_Pgacw  ) * fac
wk(I_Piacr_g) = wk(I_Piacr_g) * fac
wk(I_Psacr_g) = wk(I_Psacr_g) * fac
wk(I_Pgacr  ) = wk(I_Pgacr  ) * fac
wk(I_Pgfrz  ) = wk(I_Pgfrz  ) * fac
wk(I_Praci_g) = wk(I_Praci_g) * fac
wk(I_Pgaci  ) = wk(I_Pgaci  ) * fac
wk(I_Pgaut  ) = wk(I_Pgaut  ) * fac
wk(I_Pracs  ) = wk(I_Pracs  ) * fac
wk(I_Pgacs  ) = wk(I_Pgacs  ) * fac
wk(I_Pgsub  ) = wk(I_Pgsub  ) * fac
wk(I_Pgmlt  ) = wk(I_Pgmlt  ) * fac
qc_t = + wk(I_Pimlt  ) - wk(I_Praut  ) - wk(I_Pracw  ) - wk(I_Pihom  ) - wk(I_Pihtr  ) - wk(I_Psacw  ) - wk(I_Psfw   ) - wk(I_Pgacw  )   
qr_t = + wk(I_Praut  ) + wk(I_Pracw  ) + wk(I_Psmlt  ) + wk(I_Pgmlt  ) - wk(I_Prevp  ) - wk(I_Piacr_s) - wk(I_Psacr_s) - wk(I_Piacr_g) - wk(I_Psacr_g) - wk(I_Pgacr  ) - wk(I_Pgfrz  )   
qi_t = + wk(I_Pigen  ) + wk(I_Pidep  ) + wk(I_Pihom  ) + wk(I_Pihtr  ) - wk(I_Pisub  ) - wk(I_Pimlt  ) - wk(I_Psaut  ) - wk(I_Praci_s) - wk(I_Psaci  ) - wk(I_Psfi   ) - wk(I_Praci_g) - wk(I_Pgaci  )   
qs_t = + wk(I_Psdep  ) + wk(I_Psacw  ) + wk(I_Psfw   ) + wk(I_Piacr_s) + wk(I_Psacr_s) + wk(I_Psaut  ) + wk(I_Praci_s) + wk(I_Psaci  ) + wk(I_Psfi   ) - wk(I_Pssub  ) - wk(I_Psmlt  ) - wk(I_Pgaut  ) - wk(I_Pracs  ) - wk(I_Pgacs  )   
qg_t = + wk(I_Pgdep  ) + wk(I_Pgacw  ) + wk(I_Piacr_g) + wk(I_Psacr_g) + wk(I_Pgacr  ) + wk(I_Pgfrz  ) + wk(I_Praci_g) + wk(I_Pgaci  ) + wk(I_Pgaut  ) + wk(I_Pracs  ) + wk(I_Pgacs  ) - wk(I_Pgsub  ) - wk(I_Pgmlt  )   
qc_t = max( qc_t, -wk(I_dqc_dt) )
qr_t = max( qr_t, -wk(I_dqr_dt) )
qi_t = max( qi_t, -wk(I_dqi_dt) )
qs_t = max( qs_t, -wk(I_dqs_dt) )
qg_t = max( qg_t, -wk(I_dqg_dt) )
qv_t = - ( qc_t + qr_t + qi_t + qs_t + qg_t )
drhogqv(ij,k) = rhog(ij,k) * qv_t * dt
drhogqc(ij,k) = rhog(ij,k) * qc_t * dt
drhogqr(ij,k) = rhog(ij,k) * qr_t * dt
drhogqi(ij,k) = rhog(ij,k) * qi_t * dt
drhogqs(ij,k) = rhog(ij,k) * qs_t * dt
drhogqg(ij,k) = rhog(ij,k) * qg_t * dt
Vt(ij,k,I_QR) = Vtr
Vt(ij,k,I_QI) = Vti
Vt(ij,k,I_QS) = Vts
Vt(ij,k,I_QG) = Vtg
xf_qc = rhoqc / Nc(ij,k) * 1.E-9_RP                    
rf_qc = ( coef_xf * xf_qc + EPS )**0.33333333_RP       
r2_qc = coef_dgam * rf_qc**2 * ( Nc(ij,k) * 1.E+6_RP ) 
r2_qr = 0.25_RP * N0r * GAM_3 * RLMDr_3                
r3_qc = coef_xf * dens * qc                            
r3_qr = coef_xf * dens * qr                            
zerosw = 0.5_RP - sign(0.5_RP, (r2_qc+r2_qr)-r2_min )
rceff(ij,k) = ( r3_qc + r3_qr ) / ( r2_qc + r2_qr + zerosw ) * ( 1.0_RP - zerosw )
sw = ( 0.5_RP + sign(0.5_RP, (qc+qr)-q_min ) ) * zerosw 
rctop(ij,1) = (        sw ) * rceff(ij,k) + ( 1.0_RP-sw ) * UNDEF
tctop(ij,1) = (        sw ) * temp + ( 1.0_RP-sw ) * UNDEF
zerosw = 0.5_RP - sign(0.5_RP, r2_qc-r2_min )
rceff_cld(ij,k) = r3_qc / ( r2_qc + zerosw ) * ( 1.0_RP - zerosw )
sw = ( 0.5_RP + sign(0.5_RP, qc-q_min ) ) * zerosw 
rctop_cld(ij,1) = (        sw ) * rceff_cld(ij,k) + ( 1.0_RP-sw ) * UNDEF
tctop_cld(ij,1) = (        sw ) * temp + ( 1.0_RP-sw ) * UNDEF
@end parallelRegion
if ( TIME_CSTEP == EX_STEP ) then
call PROF_rapend  ('_kernel_partM12')
endif
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
rhogq(ij,k,I_QV) = rhogq(ij,k,I_QV) + drhogqv(ij,k)
rhogq(ij,k,I_QC) = rhogq(ij,k,I_QC) + drhogqc(ij,k)
rhogq(ij,k,I_QR) = rhogq(ij,k,I_QR) + drhogqr(ij,k)
rhogq(ij,k,I_QI) = rhogq(ij,k,I_QI) + drhogqi(ij,k)
rhogq(ij,k,I_QS) = rhogq(ij,k,I_QS) + drhogqs(ij,k)
rhogq(ij,k,I_QG) = rhogq(ij,k,I_QG) + drhogqg(ij,k)
@end parallelRegion
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
rhoge(ij,k) = rhoge(ij,k) - LHV * drhogqv(ij,k) + LHF * drhogqi(ij,k) + LHF * drhogqs(ij,k) + LHF * drhogqg(ij,k)
@end parallelRegion
@parallelRegion{domName(ij), domSize(ijdim)}
rceff    (ij,kmin-1) = 0.0_RP
rceff_cld(ij,kmin-1) = 0.0_RP
rceff    (ij,kmax+1) = 0.0_RP
rceff_cld(ij,kmax+1) = 0.0_RP
sw = ( 0.5_RP + sign(0.5_RP, tctop(ij,1)-TEM00 ) ) 
rwtop(ij,1) = (        sw ) * rctop(ij,1) + ( 1.0_RP-sw ) * UNDEF
sw = ( 0.5_RP + sign(0.5_RP, rctop_cld(ij,1)-TEM00 ) ) 
rwtop_cld(ij,1) = (        sw ) * rctop_cld(ij,1) + ( 1.0_RP-sw ) * UNDEF
@end parallelRegion
if ( TIME_CSTEP == EX_STEP ) then
call PROF_rapstart('_kernel_partM3')
endif
@parallelRegion{domName(ij,nq), domSize(ijdim,nqmax)}
Vt(ij,kmin-1,nq) = 0.0_RP
Vt(ij,kmax+1,nq) = 0.0_RP
@end parallelRegion
@parallelRegion{domName(ij,k,nq), domSize(ijdim,kdim,nqmax), startAt(1,kmin,NQW_STR), endAt(ijdim,kmax,NQW_END)}
q(ij,k,nq) = rhogq(ij,k,nq) / rhog(ij,k)
@end parallelRegion
call THRMDYN_qd_ijk( ijdim, kdim, q (:,:,:), qd(:,:)    ) 
call THRMDYN_cv_ijk( ijdim, kdim, qd (:,:), q  (:,:,:), cva(:,:)    ) 
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
tem (ij,k) = rhoge(ij,k) / ( rhog(ij,k) * cva(ij,k) )
rgs (ij,k) = gam2 (ij,k) / gsgam2 (ij,k)
rgsh(ij,k) = gam2h(ij,k) / gsgam2h(ij,k)
@end parallelRegion
preciptation_flag(:)    = .false.
preciptation_flag(I_QR) = .true.
preciptation_flag(I_QI) = .true.
preciptation_flag(I_QS) = .true.
preciptation_flag(I_QG) = .true.
if ( precip_transport_type == '3WATER' ) then
preciptation_flag(I_QI) = .false.
endif
call precip_transport_new( ijdim, rhog, rhogvx, rhogvy, rhogvz, rhogw, rhoge, rhogq, rho, tem, pre, vx, vy, vz, w, q, qd, z, Vt, precip, precip_rhoe, precip_lh_heat, precip_rhophi, precip_rhokin, gprec, gsgam2, gsgam2h, rgs, rgsh, ix, iy, iz, jx, jy, jz, dt                 )
if ( TIME_CSTEP == EX_STEP ) then
call PROF_rapend  ('_kernel_partM3')
endif
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
ml_Pconv(ij,k) = q(ij,k,I_QV)
ml_Pconw(ij,k) = q(ij,k,I_QC)
ml_Pconi(ij,k) = q(ij,k,I_QI)
@end parallelRegion
if ( TIME_CSTEP == EX_STEP ) then
call PROF_rapstart('_kernel_partM4')
endif
if ( OPT_EXPLICIT_ICEGEN ) then
call SATURATION_setrange( 100.0_RP, 90.0_RP )
call SATURATION_adjustment( ijdim, kdim, rhog  (:,:), rhoge (:,:), rhogq (:,:,:), tem   (:,:), q     (:,:,:), qd    (:,:), gsgam2(:,:), ice_adjust=.false. ) 
else
call SATURATION_setrange( 273.16_RP, 233.16_RP )
call SATURATION_adjustment( ijdim, kdim, rhog  (:,:), rhoge (:,:), rhogq (:,:,:), tem   (:,:), q     (:,:,:), qd    (:,:), gsgam2(:,:), ice_adjust=.true.  ) 
endif
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
ml_Pconv(ij,k) = q(ij,k,I_QV) - ml_Pconv(ij,k)
ml_Pconw(ij,k) = q(ij,k,I_QC) - ml_Pconw(ij,k)
ml_Pconi(ij,k) = q(ij,k,I_QI) - ml_Pconi(ij,k)
@end parallelRegion
if ( TIME_CSTEP == EX_STEP ) then
call PROF_rapend  ('_kernel_partM4')
endif
call negative_filter( ijdim, rhog  (:,:), rhoge (:,:), rhogq (:,:,:), rho   (:,:), tem   (:,:), pre   (:,:), q     (:,:,:), gsgam2(:,:)    ) 
call PROF_rapend  ('____MP_NSW6')
return
end subroutine mp_nsw6
subroutine negative_filter( ijdim, rhog, rhoge, rhogq, rho, tem, pre, q, gsgam2 )
use mod_thrmdyn, only: THRMDYN_cv_ijk, THRMDYN_qd_ijk
use mod_debug, only: kdim, kmin, kmax, nqmax, NQW_STR, NQW_END, I_QV
implicit none
integer,  intent(in)    :: ijdim
real(RP), intent(inout) :: rhog  (ijdim,kdim)
real(RP), intent(inout) :: rhoge (ijdim,kdim)
real(RP), intent(inout) :: rhogq (ijdim,kdim,nqmax)
real(RP), intent(inout) :: rho   (ijdim,kdim)
real(RP), intent(in)    :: tem   (ijdim,kdim)
real(RP), intent(inout) :: pre   (ijdim,kdim)
real(RP), intent(inout) :: q     (ijdim,kdim,nqmax)
real(RP), intent(in)    :: gsgam2(ijdim,kdim)
real(RP) :: qd (ijdim,kdim)
real(RP) :: cva(ijdim,kdim)
real(RP) :: diffq
real(RP) :: Rdry, Rvap
integer  :: ij, k, nq
@domainDependant{attribute(autoDom, present)}
rhog, rhoge, rhogq, rho, tem, pre, q, gsgam2, qd, cva
@end domainDependant
Rdry = CONST_Rdry
Rvap = CONST_Rvap
@parallelRegion{domName(ij,k), domSize(ijdim,kdim), startAt(1,kmin), endAt(ijdim,kmax)}
diffq = 0.0_RP
do nq = NQW_STR+1, NQW_END
diffq = diffq + rhogq(ij,k,nq)
rhogq(ij,k,nq) = max( rhogq(ij,k,nq), 0.0_RP )
enddo
do nq = NQW_STR+1, NQW_END
diffq = diffq - rhogq(ij,k,nq)
enddo
rhogq(ij,k,I_QV) = rhogq(ij,k,I_QV) + diffq
@end parallelRegion
@parallelRegion{domName(ij,k), domSize(ijdim,kdim), startAt(1,kmin), endAt(ijdim,kmax)}
diffq = rhogq(ij,k,I_QV)
rhogq(ij,k,I_QV) = max( rhogq(ij,k,I_QV), 0.0_RP )
diffq = diffq - rhogq(ij,k,I_QV)
rhog(ij,k) = rhog(ij,k) * ( 1.0_RP - diffq ) 
rho (ij,k) = rhog(ij,k) / gsgam2(ij,k)
@end parallelRegion
@parallelRegion{domName(ij,k,nq), domSize(ijdim,kdim,nqmax), startAt(1,kmin,NQW_STR), endAt(ijdim,kmax,NQW_END)}
q(ij,k,nq) = rhogq(ij,k,nq) / rhog(ij,k)
@end parallelRegion
call THRMDYN_qd_ijk( ijdim, kdim, q (:,:,:), qd(:,:)    ) 
call THRMDYN_cv_ijk( ijdim, kdim, qd (:,:), q  (:,:,:), cva(:,:)    ) 
@parallelRegion{domName(ij,k), domSize(ijdim,kdim), startAt(1,kmin), endAt(ijdim,kmax)}
rhoge(ij,k) = tem(ij,k) * rhog(ij,k) * cva(ij,k)
pre  (ij,k) = rho(ij,k) * ( qd(ij,k) * Rdry + q(ij,k,I_QV) * Rvap ) * tem(ij,k)
@end parallelRegion
return
end subroutine negative_filter
subroutine Bergeron_param( ijdim, tem, a1, a2, ma2    )
use mod_debug, only: kdim
implicit none
integer,  intent(in)  :: ijdim
real(RP), intent(in)  :: tem(ijdim,kdim)
real(RP), intent(out) :: a1 (ijdim,kdim)
real(RP), intent(out) :: a2 (ijdim,kdim)
real(RP), intent(out) :: ma2(ijdim,kdim)
real(RP) :: temc
integer  :: itemc
real(RP) :: fact
integer  :: ij, k
@domainDependant{attribute(autoDom, present)}
tem, a1, a2, ma2, a1_tab, a2_tab
@end domainDependant
@parallelRegion{domName(ij,k), domSize(ijdim,kdim)}
temc  = min( max( tem(ij,k)-TEM00, -30.99_RP ), 0.0_RP ) 
itemc = int( -temc ) + 1                                 
fact  = - ( temc + real(itemc-1,kind=8) )
a1 (ij,k) = ( 1.0_RP-fact ) * a1_tab(itemc  ) + (        fact ) * a1_tab(itemc+1)
a2 (ij,k) = ( 1.0_RP-fact ) * a2_tab(itemc  ) + (        fact ) * a2_tab(itemc+1)
ma2(ij,k) = 1.0_RP - a2(ij,k)
a1 (ij,k) = a1(ij,k) * 1.E-3_RP**ma2(ij,k) 
@end parallelRegion
return
end subroutine Bergeron_param
end module mod_mp_nsw6

